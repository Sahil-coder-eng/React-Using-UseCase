const express = require("express");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const bodyParser = require("body-parser");

const app = express();
app.use(cors());
app.use(bodyParser.json());

const SECRET_KEY = "mysecretkey";

// 🔹 Sample users (hardcoded for testing)
const users = [
  { username: "admin", password: "admin123", role: "Admin" },
  { username: "mod", password: "mod123", role: "Moderator" },
  { username: "user", password: "user123", role: "User" },
];

// -----------------------------------------------------
// 1️⃣ LOGIN ROUTE - Issues JWT with role in payload
// -----------------------------------------------------
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const foundUser = users.find(
    (u) => u.username === username && u.password === password
  );

  if (!foundUser) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  const token = jwt.sign(
    { username: foundUser.username, role: foundUser.role },
    SECRET_KEY,
    { expiresIn: "1h" }
  );

  res.json({
    message: "Login successful",
    role: foundUser.role,
    token,
  });
});

// -----------------------------------------------------
// 2️⃣ MIDDLEWARE - Verify Token & Extract Role
// -----------------------------------------------------
const verifyToken = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader)
    return res.status(401).json({ message: "Missing Authorization header" });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err)
      return res.status(403).json({ message: "Invalid or expired token" });

    req.user = decoded; // contains username & role
    next();
  });
};

// -----------------------------------------------------
// 3️⃣ ROLE AUTHORIZATION MIDDLEWARE
// -----------------------------------------------------
const authorizeRoles = (...allowedRoles) => {
  return (req, res, next) => {
    if (!allowedRoles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ message: "Access denied: insufficient role permissions" });
    }
    next();
  };
};

// -----------------------------------------------------
// 4️⃣ PROTECTED ROUTES
// -----------------------------------------------------

// Accessible by Admin only
app.get("/admin/dashboard", verifyToken, authorizeRoles("Admin"), (req, res) => {
  res.json({ message: `Welcome Admin ${req.user.username}, this is your dashboard!` });
});

// Accessible by Moderator & Admin
app.get("/moderator/manage", verifyToken, authorizeRoles("Moderator", "Admin"), (req, res) => {
  res.json({ message: `Hello ${req.user.role}, you can manage users here.` });
});

// Accessible by User, Moderator, Admin
app.get("/user/profile", verifyToken, authorizeRoles("User", "Moderator", "Admin"), (req, res) => {
  res.json({ message: `Welcome ${req.user.username}, this is your profile.` });
});

// Public route (no token required)
app.get("/public", (req, res) => {
  res.json({ message: "This route is public and requires no authentication." });
});

// -----------------------------------------------------
// 5️⃣ START SERVER
// -----------------------------------------------------
const PORT = 4000;
app.listen(PORT, () => console.log(`✅ Server running on http://localhost:${PORT}`));
